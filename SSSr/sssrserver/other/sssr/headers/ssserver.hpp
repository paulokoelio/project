#ifndef SSSERVER_HPP_
#define SSSERVER_HPP_

#include "lib.h"
#include "ssserver.lib.config.hpp"
#include <boost/asio.hpp>
#include <stdexcept>
#include <string>

namespace sssr
{

constexpr char DEFAULT_CONFIG_FILE[] = "ssserver.lib.config.txt";

class Server
{
public:
    unsigned long long time() { return slvr::lib::fixed_time_in_usec(); }
    void prepare(std::string new_config_file = std::string(DEFAULT_CONFIG_FILE));
    using endpoint_t = boost::asio::ip::tcp::endpoint;
    using tcp_t = boost::asio::ip::tcp;

    std::string print();


private:
    boost::asio::io_service m_io_context;
    std::string m_config_file;
    int m_ports_start;
    int m_ports_end;
    std::vector<endpoint_t> m_endpoints;

    void load_config();
};



/**
Error type that can be avoided by some way, for example, repeated try or after correction
of input data.
*/
struct err_logic : public std::logic_error
{
};

/**
Error type that cannot be avoided and normally is generated by external objects or functions.
*/
struct err_runtime : public std::runtime_error
{
};

} // namespace sssr

#endif /* SSSERVER_HPP_ */
